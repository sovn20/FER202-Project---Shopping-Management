import axiosInstance from "./axiosInstance"; // Import axiosInstance (ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh s·∫µn v·ªõi baseURL)

// üìå H√†m l·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
export async function getProducts() {
    const response = await axiosInstance.get("/products"); // G·ª≠i request GET ƒë·∫øn endpoint /products
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ API
}

// üìå H√†m l·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt s·∫£n ph·∫©m theo ID
export async function getProductById(id) {
    const response = await axiosInstance.get(`/products/${id}`); // G·ª≠i request GET ƒë·∫øn endpoint /products/{id}
    return response.data; // Tr·∫£ v·ªÅ d·ªØ li·ªáu chi ti·∫øt c·ªßa s·∫£n ph·∫©m
}

// üìå H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
export async function getProductsByCategory(categoryId) {
    const response = await axiosInstance.get(`/products`, {
        params: { categoryId }, // Truy·ªÅn categoryId d∆∞·ªõi d·∫°ng query parameter
    });
    return response.data; // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
}

// üìå H√†m x√≥a m·ªôt s·∫£n ph·∫©m theo ID
export async function deleteProduct(id) {
    try {
        const response = await axiosInstance.delete(`/products/${id}`); // G·ª≠i request DELETE ƒë·∫øn /products/{id}
        return response.data; // Tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ server n·∫øu x√≥a th√†nh c√¥ng
    } catch (error) {
        console.error("Error deleting product:", error); // Log l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ khi x√≥a
        return false; // Tr·∫£ v·ªÅ false n·∫øu c√≥ l·ªói x·∫£y ra
    }
}

// üìå H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m c·ªßa m·ªôt ng∆∞·ªùi b√°n
export async function getProductsBySeller(sellerId) {
    const response = await axiosInstance.get(`/products`, {
        params: { sellerId }, // Truy·ªÅn sellerId d∆∞·ªõi d·∫°ng query parameter
    });
    return response.data; // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m c·ªßa ng∆∞·ªùi b√°n
}

// üìå H√†m t·∫°o m·ªôt s·∫£n ph·∫©m m·ªõi
export async function createProduct(productData) {
    try {
        // Th√™m ID t·∫°m th·ªùi v√† th·ªùi gian t·∫°o cho s·∫£n ph·∫©m m·ªõi
        const newProduct = {
            ...productData,
            id: Date.now().toString(), // T·∫°o ID t·∫°m th·ªùi d·ª±a tr√™n timestamp
            createdAt: new Date().toISOString(), // Th√™m timestamp cho s·∫£n ph·∫©m
        };

        const response = await axiosInstance.post("/products", newProduct); // G·ª≠i request POST ƒë·∫øn /products
        return response.status === 201 ? newProduct : null; // Tr·∫£ v·ªÅ s·∫£n ph·∫©m m·ªõi n·∫øu t·∫°o th√†nh c√¥ng
    } catch (error) {
        console.error("Error creating product:", error); // Log l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
        return null; // Tr·∫£ v·ªÅ null n·∫øu th·∫•t b·∫°i
    }
}

// üìå H√†m t√¨m ki·∫øm s·∫£n ph·∫©m theo t·ª´ kh√≥a
export async function searchProducts(query) {
    const response = await axiosInstance.get(`/products`, {
        params: { q: query }, // Truy·ªÅn query d∆∞·ªõi d·∫°ng tham s·ªë t√¨m ki·∫øm
    });
    return response.data; // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p
}

// üìå H√†m ch·ªânh s·ª≠a s·∫£n ph·∫©m theo ID
export async function editProduct(id, updatedData) {
    try {
        const response = await axiosInstance.put(`/products/${id}`, updatedData); // G·ª≠i request PUT ƒë·∫øn /products/{id}
        return response.status === 200; // Tr·∫£ v·ªÅ true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
    } catch (error) {
        console.error("Error editing product:", error); // Log l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ
        return false; // Tr·∫£ v·ªÅ false n·∫øu th·∫•t b·∫°i
    }
}

// üìå H√†m l·ªçc s·∫£n ph·∫©m theo nhi·ªÅu ti√™u ch√≠ (danh m·ª•c, gi√°, brand, s·∫Øp x·∫øp)
export async function filterProducts({ categoryId, minPrice, maxPrice, brands, sortBy }) {
    const params = {
        categoryId, // L·ªçc theo danh m·ª•c
        price_gte: minPrice,
        price_lte: maxPrice,
        ...(brands && brands.length > 0 && { brand: brands }), // N·∫øu c√≥ brand, th√™m v√†o b·ªô l·ªçc
        _sort: sortBy === "newest" ? "createdAt"
            : sortBy === "rating" ? "rating"
                : "price", // S·∫Øp x·∫øp theo ng√†y t·∫°o, ƒë√°nh gi√° ho·∫∑c gi√°
        _order: sortBy === "price-desc" ? "desc" : "asc", // S·∫Øp x·∫øp tƒÉng/gi·∫£m d·∫ßn
    };

    const response = await axiosInstance.get(`/products`, { params }); // G·ª≠i request GET v·ªõi tham s·ªë l·ªçc
    return response.data; // Tr·∫£ v·ªÅ danh s√°ch s·∫£n ph·∫©m l·ªçc ƒë∆∞·ª£c
}
